name: Deploy Latest Wordpress

on:
  workflow_dispatch:
  schedule:
     - cron:  '0 2 * * 1' # runs every Monday at 2:00 AM

jobs:
  poll:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Check workflow status
        id: check_status
        run: |
          # Get the status of the latest run of workflow from the other repo
          status=$(curl --location --request GET 'https://api.github.com/repos/bcgov/wordpress-deploy-digimod/actions/workflows/46272733/runs' | jq '.workflow_runs[0].conclusion' )

          echo "Last build run: "$status
          # Check if the workflow was successful
          if [ "$status" == "success" ]; then
              echo "{status}={success}" >> $GITHUB_OUTPUT
          else
              echo "{status}={failure}" >> $GITHUB_OUTPUT
          fi
      - name: Deploy to latest
        if:  ${{ steps.check_status.outputs.status }} == 'success'
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_DEV_API_TOKEN }} --insecure-skip-tls-verify=true
          git clone -b digimod-deploy https://github.com/bcgov/wordpress-deploy-digimod.git
          cd wordpress-deploy-digimod
          # Delete existing deployment, if it exists
          NAMESPACE="c0cce6-dev"
          OC_ENV=dev
          OC_SITE_NAME=digital-latest
          pods=oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME}
          if [ -n "$pods" ]; then
              WORDPRESS_POD_NAME=$(oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME} -o jsonpath='{.items[0].metadata.name}')
              WORDPRESS_CONTAINER_NAME=$(oc get pods -n $NAMESPACE $WORDPRESS_POD_NAME -o jsonpath='{.spec.containers[0].name}')
              oc delete secrets ${OC_SITE_NAME}-wordpress-secrets -n $NAMESPACE  
              oc delete -k ./deployments/kustomize/overlays/digital-latest
          fi   

          # Create new WordPress instance
          
          oc process -p ENV_NAME=dev -p SITE_NAME=latest -f openshift/templates/secrets/wordpress-secrets.yaml | oc apply -f -
          oc apply -k ./deployments/kustomize/overlays/digital-latest

          # Wait for WordPress pod to be running

          WORDPRESS_POD_NAME=$(oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME} -o jsonpath='{.items[0].metadata.name}')
          oc wait --for=condition=Ready pod/$WORDPRESS_POD_NAME -n $NAMESPACE --timeout=5m
          # Wait for the WordPress container to be created
          WORDPRESS_CONTAINER_NAME=null;
          while true; do
              WORDPRESS_CONTAINER_NAME=$(oc get pods -n $NAMESPACE $WORDPRESS_POD_NAME -o jsonpath='{.spec.containers[0].name}')
              if [ -n "$WORDPRESS_CONTAINER_NAME" ]; then
              break
              fi
              echo "Waiting for WordPress container to be created..."
              sleep 5
          done
          # Add an additional sleep to ensure the container is fully initialized
          echo "Waiting for WordPress container to be fully initialized..."
          sleep 15

          # Install wordpress
          # Download wp-cli in the GitHub Actions workspace
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar

          # Copy wp-cli to the WordPress instance and install wordpress
          oc cp --no-preserve wp-cli.phar $NAMESPACE/$WORDPRESS_POD_NAME:/tmp/wp-cli.phar -c $WORDPRESS_CONTAINER_NAME
          oc exec -n $NAMESPACE -c $WORDPRESS_CONTAINER_NAME $WORDPRESS_POD_NAME -- chmod +x /tmp/wp-cli.phar

          #Perform a site install
          oc exec -n $NAMESPACE -c $WORDPRESS_CONTAINER_NAME $WORDPRESS_POD_NAME -- php /tmp/wp-cli.phar core install --url=${OC_SITE_NAME}.apps.silver.devops.gov.bc.ca --title="${OC_SITE_NAME}.gov.bc.ca Testing Framework" --admin_user=tester --admin_password=tester --admin_email=info@example.com
      - name: Replicate Production
        if:  ${{ steps.check_status.outputs.status }} == 'success'
        uses: ./.github/actions/replicate_prod
        with:
          environment: dev
          site-name: latest
          openshift-server: ${{ secrets.OPENSHIFT_SERVER }}
          dev-token: ${{ secrets.OPENSHIFT_DEV_API_TOKEN }}
          test-token: ${{ secrets.OPENSHIFT_TEST_API_TOKEN }}
          prod-token: ${{ secrets.OPENSHIFT_PROD_API_TOKEN }}