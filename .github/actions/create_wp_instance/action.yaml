name: Create Wordpress instance
description: 'Creates a new WordPress instance'
inputs:
  environment:
    description: 'Deployment environment'
    required: true
    default: 'test'
  site-name:
    description: 'Site name'
    required: true
    default: 'test'
runs:
  using: 'composite'
  steps:
    - run: |
        git clone -b digimod-deploy https://github.com/bcgov/wordpress-deploy-digimod.git
      
        #Log in to OpenShift
        echo "Deploying to $ENVIRONMENT"
        case "${ENVIRONMENT}" in
          "dev")
            token=$DEV_TOKEN
            ;;
          "test")
            token=$TEST_TOKEN
            ;;
          "prod")
            # token=$PROD_TOKEN
            echo "For safety reasons, we won't run this action on prod!"
            exit 1
            ;;
          *)
            echo "Unknown environment: ${ENVIRONMENT}"
            exit 1
            ;;
        esac

        oc login OPENSHIFT_SERVER --token=$token --insecure-skip-tls-verify=true
        
        # Delete existing deployment, if it exists
        NAMESPACE="c0cce6-$ENVIRONMENT"
        export OC_ENV=$ENVIRONMENT
        export OC_SITE_NAME=digital-$SITE_NAME
        export WORDPRESS_POD_NAME=$(oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME} -o jsonpath='{.items[0].metadata.name}')
        WORDPRESS_CONTAINER_NAME=$(oc get pods -n $NAMESPACE $WORDPRESS_POD_NAME -o jsonpath='{.spec.containers[0].name}')
        if [ -n "$WORDPRESS_CONTAINER_NAME" ]; then
          cd wordpress-deploy-digimod
          chmod +x site-delete-unix.sh
          ./site-delete-unix.sh
        fi      

        # Create new WordPress instance
        export NAMESPACE="c0cce6-$ENVIRONMENT"
        export OC_ENV=$ENVIRONMENT
        export OC_SITE_NAME=digital-$SITE_NAME
        cd wordpress-deploy-digimod
        chmod +x site-builder-unix.sh
        ./site-builder-unix.sh

        # Wait for WordPress pod to be running
        NAMESPACE="c0cce6-$ENVIRONMENT"
        OC_SITE_NAME=digital-$SITE_NAME
        WORDPRESS_POD_NAME=$(oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME} -o jsonpath='{.items[0].metadata.name}')
        oc wait --for=condition=Ready pod/$WORDPRESS_POD_NAME -n $NAMESPACE --timeout=5m
        # Wait for the WordPress container to be created
        while true; do
          WORDPRESS_CONTAINER_NAME=$(oc get pods -n $NAMESPACE $WORDPRESS_POD_NAME -o jsonpath='{.spec.containers[0].name}')
          if [ -n "$WORDPRESS_CONTAINER_NAME" ]; then
            break
          fi
          echo "Waiting for WordPress container to be created..."
          sleep 5
        done
        # Add an additional sleep to ensure the container is fully initialized
        echo "Waiting for WordPress container to be fully initialized..."
        sleep 15

        # Install wordpress
        NAMESPACE="c0cce6-$ENVIRONMENT"
        OC_ENV=$ENVIRONMENT
        OC_SITE_NAME=digital-$SITE_NAME
        WORDPRESS_POD_NAME=$(oc get pods -n $NAMESPACE -l app=wordpress,role=wordpress-core,site=${OC_SITE_NAME} -o jsonpath='{.items[0].metadata.name}')
        WORDPRESS_CONTAINER_NAME=$(oc get pods -n $NAMESPACE $WORDPRESS_POD_NAME -o jsonpath='{.spec.containers[0].name}')
        # Download wp-cli in the GitHub Actions workspace
        curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        chmod +x wp-cli.phar
        
        # Copy wp-cli to the WordPress instance and install wordpress
        oc cp --no-preserve wp-cli.phar $NAMESPACE/$WORDPRESS_POD_NAME:/tmp/wp-cli.phar -c $WORDPRESS_CONTAINER_NAME
        oc exec -n $NAMESPACE -c $WORDPRESS_CONTAINER_NAME $WORDPRESS_POD_NAME -- chmod +x /tmp/wp-cli.phar
        
        #Perform a site install
        oc exec -n $NAMESPACE -c $WORDPRESS_CONTAINER_NAME $WORDPRESS_POD_NAME -- php /tmp/wp-cli.phar core install --url=${OC_SITE_NAME}.apps.silver.devops.gov.bc.ca --title="${OC_SITE_NAME}.gov.bc.ca Testing Framework" --admin_user=tester --admin_password=tester --admin_email=info@example.com
      shell: bash
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment }}
        SITE_NAME: ${{ github.event.inputs.site-name }}
        OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
        DEV_TOKEN: ${{ secrets.OPENSHIFT_DEV_API_TOKEN }}
        TEST_TOKEN: ${{ secrets.OPENSHIFT_TEST_API_TOKEN }}
        PROD_TOKEN: ${{ secrets.OPENSHIFT_PROD_API_TOKEN }}